// Generated by CoffeeScript 1.7.1
(function() {
  var controller, makeLight, positionLight, releaseLight;

  window.controller = controller = new Leap.Controller({
    background: true
  });

  controller.use('transform', {
//    quaternion: (new THREE.Quaternion).setFromEuler(new THREE.Euler(Math.PI * -0.3, 0, Math.PI, 'ZXY')),
    quaternion: (new THREE.Quaternion).setFromEuler(new THREE.Euler(Math.PI * -0.5, 0, Math.PI, 'ZXY')),
    position: new THREE.Vector3(0, 100, 0)
  });

      var path = "img/";
      var format = '.png';
      var urls = [
        path + 'px' + format, path + 'nx' + format,
        path + 'py' + format, path + 'ny' + format,
        path + 'pz' + format, path + 'nz' + format
      ];

      var textureCube = THREE.ImageUtils.loadTextureCube( urls );
      var materialReflection = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );



  controller.use('riggedHand', {
    parent: window.scene,
    camera: window.camera,
    offset: new THREE.Vector3(0,-100,-100),
    //positionScale: 2,
    scale: 1.5,
    renderFn: null,
    materialOptions: {
      //wireframe: true,
       reflectivity: 1.0,
       opacity: 1.0,
       color: 0xffffff,
       ambient: 0xffffff,
       envMap: textureCube
    },
    boneColors: function(boneMesh, leapHand) {
      return {
        hue: 0.6,
        saturation: leapHand.pinchStrength,
        lightness: 0.8
      };
    }
  });
  
/* */
  controller.use('playback', {
    recording: 'leap-playback-recording-57fps.json.lz',
    resumeOnHandLost: false
  });
/* */
  controller.connect();

  makeLight = function(hand) {

    if (destination.hand) {
      destination.material = materialActive;
      //if (destination.interactionDelta) {
        destination.interactionDelta = {
          x: destination.hand.position.x - destination.position.x,
          y: destination.hand.position.y - destination.position.y,
          z: destination.hand.position.z - destination.position.z
        };
        //console.log(destination.interactionDelta);
      //}
     
    }
  

    return;
    /*
    var light, lightVisualizer;
    light = window.lights.pop();
    lightVisualizer = window.lightVisualizers.pop();
    light.intensity = 10;
    hand.data('light', light);
    lightVisualizer.position = light.position;
    lightVisualizer.visible = true;
    return hand.data('lightVisualizer', lightVisualizer);
    */
  };

  releaseLight = function(hand) {
    destination.material = materialNormal;
    destination.hand = null;
    // destination.interactionDelta = null;

    return;
    /*
    var light, lightVisualizer;
    light = hand.data('light');
    if (!light) {
      return;
    }
    light.intensity = 0;
    window.lights.push(light);
    hand.data('light', null);
    lightVisualizer = hand.data('lightVisualizer');
    lightVisualizer.visible = false;
    window.lightVisualizers.push(lightVisualizer);
    return hand.data('lightVisualizer', null);
    */
  };

  positionLight = function(hand) {
    var handMesh, light, offsetDown, offsetForward, pos;
    handMesh = hand.data('riggedHand.mesh');
    if (hand.pinchStrength > 0.5) {
      if (!hand.data('pinching')) {
        makeLight(hand);
        hand.data('pinching', true);
      }
      if (light = hand.data('light')) {
        pos = Leap.vec3.clone(hand.palmPosition);
        offsetDown = Leap.vec3.clone(hand.palmNormal);
        Leap.vec3.multiply(offsetDown, offsetDown, [50, 50, 50]);
        Leap.vec3.add(pos, pos, offsetDown);
        offsetForward = Leap.vec3.clone(hand.direction);
        Leap.vec3.multiply(offsetForward, offsetForward, [30, 30, 30]);
        Leap.vec3.add(pos, pos, offsetForward);
        return handMesh.scenePosition(pos, light.position);
      }
    } else {
      if (hand.data('pinching')) {
        releaseLight(hand);
        return hand.data('pinching', false);
      }
    }
  };

  controller.on('handLost', releaseLight);

  controller.on('hand', positionLight);

}).call(this);
